#!/usr/bin/env ruby

require 'drbqs'
require 'optparse'

Version = '0.0.1'

help_message =<<HELP
Usage: #{File.basename(__FILE__)} <command> [arguments ...]
Manage DRbQS server by sending messages.
<command> is 'exit-signal', 'initialize', or 'ssh'.

HELP

def check_argument_size(argv, check_method, n)
  unless argv.size.__send__(check_method, n)
    raise "Invalid arguments number. Please refer '#{File.basename(__FILE__)} -h'."
  end
end

command = ARGV[0]
argv, command_args = DRbQS::Manage.split_arguments(ARGV)

options = {}
if /^ssh/ =~ command
  check_argument_size(argv, :>=, 2)
  ssh_host =DRbQS::SSHHost.new
  path, options = ssh_host.get_options(argv[1])
  $stdout.puts "Use configuration: #{path}" if path
  argv[1] = options[:dest] if options[:dest]
end

begin
  OptionParser.new(help_message) do |opt|
    opt.on('--debug', 'Set $DEBUG true.') do |v|
      $DEBUG = true
    end
    opt.on('--dir DIR', String, 'Set the base directory over ssh.') do |v|
      options[:dir] = v
    end
    opt.on('--shell STR', String, 'Set the shell over ssh') do |v|
      options[:shell] = v
    end
    opt.on('--rvm STR', String, 'Ruby version to use on RVM over ssh.') do |v|
      options[:rvm] = v
    end
    opt.on('--rvm-init PATH', String, 'Path of script to initialize RVM over ssh.') do |v|
      options[:rvm_init] = v
    end
    opt.on('--output PATH', String, 'File path that stdout and stderr are output to over ssh.') do |v|
      options[:output] = v
    end
    opt.on('--nice NUM', Integer, 'Set the value for nice command.') do |v|
      options[:nice] = v
    end
    opt.on('--nohup', 'Use nohup command.') do |v|
      options[:nohup] = true
    end
    opt.parse!(argv)
  end
rescue OptionParser::InvalidOption
  $stderr.print <<MES
error: Invalid Option
#{help_message}
MES
  exit(2)
rescue OptionParser::InvalidArgument
  $stderr.print <<MES
error: Invalid Argument
#{help_message}
MES
  exit(2)
end

manage = DRbQS::Manage.new

case command
when 'exit-signal'
  check_argument_size(argv, :==, 2)
  uri = argv[1]
  manage.send_exit_signal(uri)
when 'initialize'
  check_argument_size(argv, :==, 1)
  manage.create_config
when 'ssh'
  dest = argv[1]
  manage.execute_over_ssh(dest, options, command_args)
else
  raise "Invalid command: #{command}"
end
