#!/usr/bin/env ruby

$LOAD_PATH.unshift(File.expand_path(File.dirname(__FILE__) + '/../lib'))
require 'drbqs/utility/command_line'

help_message =<<HELP
Usage: #{File.basename(__FILE__)} <command> [arguments ...]
Execute command over SSH.
<command> is 'list', 'show', 'execute', or 'environment'

       #{File.basename(__FILE__)} list
       #{File.basename(__FILE__)} show name
       #{File.basename(__FILE__)} environment <destination>
       #{File.basename(__FILE__)} execute <destination>

HELP

options = {}
argv, command_args = DRbQS::CommandLineArgument.split_arguments(ARGV)

begin
  OptionParser.new(help_message) do |opt|
    opt.on('--debug', 'Set $DEBUG true.') do |v|
      $DEBUG = true
    end
    opt.on('--dir DIR', String, 'Set the base directory over ssh.') do |v|
      options[:dir] = v
    end
    opt.on('--shell STR', String, 'Set the shell over ssh') do |v|
      options[:shell] = v
    end
    opt.on('--rvm STR', String, 'Ruby version to use on RVM over ssh.') do |v|
      options[:rvm] = v
    end
    opt.on('--rvm-init PATH', String, 'Path of script to initialize RVM over ssh.') do |v|
      options[:rvm_init] = v
    end
    opt.on('--output PATH', String, 'File path that stdout and stderr are output to over ssh.') do |v|
      options[:output] = v
    end
    opt.on('--nice NUM', Integer, 'Set the value for nice command.') do |v|
      options[:nice] = v
    end
    opt.on('--nohup', 'Use nohup command.') do |v|
      options[:nohup] = true
    end
    opt.parse!(argv)
  end
rescue OptionParser::InvalidOption
  $stderr.print <<MES
error: Invalid Option
#{help_message}
MES
  exit(2)
rescue OptionParser::InvalidArgument
  $stderr.print <<MES
error: Invalid Argument
#{help_message}
MES
  exit(2)
end

DRbQS::CommandLineArgument.check_argument_size(argv, :>=, 1)

command = argv[0]
case command
when 'list'
  ssh_host = DRbQS::Config.new.ssh_host
  $stdout.puts ssh_host.config_names.join("\n")
  exit(0)
when 'show'
  name = argv[1]
  ssh_host = DRbQS::Config.new.ssh_host
  if path = ssh_host.get_path(name)
    $stdout.puts File.read(path)
    exit(0)
  else
    $stderr.puts "Can not find configuration file."
  end
else
  dest = argv[1]
  manage_ssh = DRbQS::Manage::SSHExecute.new(dest, options)
  case command
  when 'environment'
    manage_ssh.get_environment
    exit(0)
  when 'execute'
    if command_args.size > 0
      manage_ssh.execute(command_args)
      exit(0)
    end
  end
end
$stderr.puts "Invalid command."
exit(1)
